# dont' conflict with auth server (e.g. keycloak might be running on 8080 locally)
server.port=8081

# auto config auth server named 'local-keycloak' via well known open-id urls
#spring.security.oauth2.client.provider.local-keycloak.issuer-uri=http://localhost:8080/auth/realms/dev

# manual config auth server named 'local-keycloak'
spring.security.oauth2.client.provider.local-keycloak.authorization-uri=http://localhost:8080/auth/realms/dev/protocol/openid-connect/auth
spring.security.oauth2.client.provider.local-keycloak.token-uri=http://localhost:8080/auth/realms/dev/protocol/openid-connect/token
spring.security.oauth2.client.provider.local-keycloak.user-info-uri=http://localhost:8080/auth/realms/dev/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.local-keycloak.jwk-set-uri=http://localhost:8080/auth/realms/dev/protocol/openid-connect/certs
spring.security.oauth2.client.provider.local-keycloak.user-name-attribute=preferred_username

# our client named 'mb-client'
spring.security.oauth2.client.registration.mb-client.provider=local-keycloak
spring.security.oauth2.client.registration.mb-client.client-id=mb-client
spring.security.oauth2.client.registration.mb-client.client-secret=5aaf16e2-57b7-465f-8b0e-c2828efa998d
spring.security.oauth2.client.registration.mb-client.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.mb-client.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# the protected resource on the resource server
my-resource-server.transactions.uri=http://localhost:8082/transactions

logging.level.org.springframework.web=DEBUG